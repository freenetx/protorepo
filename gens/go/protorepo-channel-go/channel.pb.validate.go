// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/channel/channel.proto

package channelpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Create with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Create) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Create with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreateMultiError, or nil if none found.
func (m *Create) ValidateAll() error {
	return m.validate(true)
}

func (m *Create) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Destination

	if len(errors) > 0 {
		return CreateMultiError(errors)
	}

	return nil
}

// CreateMultiError is an error wrapping multiple validation errors returned by
// Create.ValidateAll() if the designated constraints aren't met.
type CreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultiError) AllErrors() []error { return m }

// CreateValidationError is the validation error returned by Create.Validate if
// the designated constraints aren't met.
type CreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateValidationError) ErrorName() string { return "CreateValidationError" }

// Error satisfies the builtin error interface
func (e CreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on Close with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Close) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Close with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CloseMultiError, or nil if none found.
func (m *Close) ValidateAll() error {
	return m.validate(true)
}

func (m *Close) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseMultiError(errors)
	}

	return nil
}

// CloseMultiError is an error wrapping multiple validation errors returned by
// Close.ValidateAll() if the designated constraints aren't met.
type CloseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseMultiError) AllErrors() []error { return m }

// CloseValidationError is the validation error returned by Close.Validate if
// the designated constraints aren't met.
type CloseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseValidationError) ErrorName() string { return "CloseValidationError" }

// Error satisfies the builtin error interface
func (e CloseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClose.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseValidationError{}

// Validate checks the field values on ChannelRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelRequestMultiError,
// or nil if none found.
func (m *ChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Req.(type) {
	case *ChannelRequest_Create:
		if v == nil {
			err := ChannelRequestValidationError{
				field:  "Req",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelRequestValidationError{
					field:  "Create",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChannelRequest_Data:
		if v == nil {
			err := ChannelRequestValidationError{
				field:  "Req",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChannelRequest_Close:
		if v == nil {
			err := ChannelRequestValidationError{
				field:  "Req",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClose()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Close",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelRequestValidationError{
						field:  "Close",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClose()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelRequestValidationError{
					field:  "Close",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChannelRequestMultiError(errors)
	}

	return nil
}

// ChannelRequestMultiError is an error wrapping multiple validation errors
// returned by ChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type ChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelRequestMultiError) AllErrors() []error { return m }

// ChannelRequestValidationError is the validation error returned by
// ChannelRequest.Validate if the designated constraints aren't met.
type ChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelRequestValidationError) ErrorName() string { return "ChannelRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelRequestValidationError{}

// Validate checks the field values on Created with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Created) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Created with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreatedMultiError, or nil if none found.
func (m *Created) ValidateAll() error {
	return m.validate(true)
}

func (m *Created) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatedMultiError(errors)
	}

	return nil
}

// CreatedMultiError is an error wrapping multiple validation errors returned
// by Created.ValidateAll() if the designated constraints aren't met.
type CreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatedMultiError) AllErrors() []error { return m }

// CreatedValidationError is the validation error returned by Created.Validate
// if the designated constraints aren't met.
type CreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatedValidationError) ErrorName() string { return "CreatedValidationError" }

// Error satisfies the builtin error interface
func (e CreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatedValidationError{}

// Validate checks the field values on Closed with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Closed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Closed with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClosedMultiError, or nil if none found.
func (m *Closed) ValidateAll() error {
	return m.validate(true)
}

func (m *Closed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClosedMultiError(errors)
	}

	return nil
}

// ClosedMultiError is an error wrapping multiple validation errors returned by
// Closed.ValidateAll() if the designated constraints aren't met.
type ClosedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClosedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClosedMultiError) AllErrors() []error { return m }

// ClosedValidationError is the validation error returned by Closed.Validate if
// the designated constraints aren't met.
type ClosedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClosedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClosedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClosedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClosedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClosedValidationError) ErrorName() string { return "ClosedValidationError" }

// Error satisfies the builtin error interface
func (e ClosedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClosed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClosedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClosedValidationError{}

// Validate checks the field values on ReceiveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveResponseMultiError, or nil if none found.
func (m *ReceiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resp.(type) {
	case *ReceiveResponse_Created:
		if v == nil {
			err := ReceiveResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReceiveResponse_Data:
		if v == nil {
			err := ReceiveResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReceiveResponse_Closed:
		if v == nil {
			err := ReceiveResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClosed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Closed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveResponseValidationError{
						field:  "Closed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClosed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveResponseValidationError{
					field:  "Closed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReceiveResponseMultiError(errors)
	}

	return nil
}

// ReceiveResponseMultiError is an error wrapping multiple validation errors
// returned by ReceiveResponse.ValidateAll() if the designated constraints
// aren't met.
type ReceiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveResponseMultiError) AllErrors() []error { return m }

// ReceiveResponseValidationError is the validation error returned by
// ReceiveResponse.Validate if the designated constraints aren't met.
type ReceiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveResponseValidationError) ErrorName() string { return "ReceiveResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReceiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveResponseValidationError{}
