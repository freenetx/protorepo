// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: lannet/channel.proto

package lannetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterServiceClient is the client API for CenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterServiceClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (CenterService_ChannelClient, error)
}

type centerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterServiceClient(cc grpc.ClientConnInterface) CenterServiceClient {
	return &centerServiceClient{cc}
}

func (c *centerServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (CenterService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &CenterService_ServiceDesc.Streams[0], "/lannet.api.CenterService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerServiceChannelClient{stream}
	return x, nil
}

type CenterService_ChannelClient interface {
	Send(*CenterRequest) error
	Recv() (*CenterResponse, error)
	grpc.ClientStream
}

type centerServiceChannelClient struct {
	grpc.ClientStream
}

func (x *centerServiceChannelClient) Send(m *CenterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerServiceChannelClient) Recv() (*CenterResponse, error) {
	m := new(CenterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CenterServiceServer is the server API for CenterService service.
// All implementations must embed UnimplementedCenterServiceServer
// for forward compatibility
type CenterServiceServer interface {
	Channel(CenterService_ChannelServer) error
	mustEmbedUnimplementedCenterServiceServer()
}

// UnimplementedCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCenterServiceServer struct {
}

func (UnimplementedCenterServiceServer) Channel(CenterService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedCenterServiceServer) mustEmbedUnimplementedCenterServiceServer() {}

// UnsafeCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServiceServer will
// result in compilation errors.
type UnsafeCenterServiceServer interface {
	mustEmbedUnimplementedCenterServiceServer()
}

func RegisterCenterServiceServer(s grpc.ServiceRegistrar, srv CenterServiceServer) {
	s.RegisterService(&CenterService_ServiceDesc, srv)
}

func _CenterService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterServiceServer).Channel(&centerServiceChannelServer{stream})
}

type CenterService_ChannelServer interface {
	Send(*CenterResponse) error
	Recv() (*CenterRequest, error)
	grpc.ServerStream
}

type centerServiceChannelServer struct {
	grpc.ServerStream
}

func (x *centerServiceChannelServer) Send(m *CenterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerServiceChannelServer) Recv() (*CenterRequest, error) {
	m := new(CenterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CenterService_ServiceDesc is the grpc.ServiceDesc for CenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lannet.api.CenterService",
	HandlerType: (*CenterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _CenterService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lannet/channel.proto",
}

// DirectNetServiceClient is the client API for DirectNetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectNetServiceClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (DirectNetService_ChannelClient, error)
}

type directNetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectNetServiceClient(cc grpc.ClientConnInterface) DirectNetServiceClient {
	return &directNetServiceClient{cc}
}

func (c *directNetServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (DirectNetService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &DirectNetService_ServiceDesc.Streams[0], "/lannet.api.DirectNetService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &directNetServiceChannelClient{stream}
	return x, nil
}

type DirectNetService_ChannelClient interface {
	Send(*DirectNetRequest) error
	Recv() (*DirectNetResponse, error)
	grpc.ClientStream
}

type directNetServiceChannelClient struct {
	grpc.ClientStream
}

func (x *directNetServiceChannelClient) Send(m *DirectNetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *directNetServiceChannelClient) Recv() (*DirectNetResponse, error) {
	m := new(DirectNetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirectNetServiceServer is the server API for DirectNetService service.
// All implementations must embed UnimplementedDirectNetServiceServer
// for forward compatibility
type DirectNetServiceServer interface {
	Channel(DirectNetService_ChannelServer) error
	mustEmbedUnimplementedDirectNetServiceServer()
}

// UnimplementedDirectNetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectNetServiceServer struct {
}

func (UnimplementedDirectNetServiceServer) Channel(DirectNetService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedDirectNetServiceServer) mustEmbedUnimplementedDirectNetServiceServer() {}

// UnsafeDirectNetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectNetServiceServer will
// result in compilation errors.
type UnsafeDirectNetServiceServer interface {
	mustEmbedUnimplementedDirectNetServiceServer()
}

func RegisterDirectNetServiceServer(s grpc.ServiceRegistrar, srv DirectNetServiceServer) {
	s.RegisterService(&DirectNetService_ServiceDesc, srv)
}

func _DirectNetService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectNetServiceServer).Channel(&directNetServiceChannelServer{stream})
}

type DirectNetService_ChannelServer interface {
	Send(*DirectNetResponse) error
	Recv() (*DirectNetRequest, error)
	grpc.ServerStream
}

type directNetServiceChannelServer struct {
	grpc.ServerStream
}

func (x *directNetServiceChannelServer) Send(m *DirectNetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *directNetServiceChannelServer) Recv() (*DirectNetRequest, error) {
	m := new(DirectNetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirectNetService_ServiceDesc is the grpc.ServiceDesc for DirectNetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectNetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lannet.api.DirectNetService",
	HandlerType: (*DirectNetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _DirectNetService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lannet/channel.proto",
}
