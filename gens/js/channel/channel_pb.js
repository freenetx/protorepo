// source: proto/channel/channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var share_share_pb = require('../../share/share_pb.js');
goog.object.extend(proto, share_share_pb);
goog.exportSymbol('proto.file.api.ChannelRequest', null, global);
goog.exportSymbol('proto.file.api.ChannelRequest.ReqCase', null, global);
goog.exportSymbol('proto.file.api.Close', null, global);
goog.exportSymbol('proto.file.api.Closed', null, global);
goog.exportSymbol('proto.file.api.Create', null, global);
goog.exportSymbol('proto.file.api.Created', null, global);
goog.exportSymbol('proto.file.api.Data', null, global);
goog.exportSymbol('proto.file.api.ReceiveResponse', null, global);
goog.exportSymbol('proto.file.api.ReceiveResponse.RespCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.api.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.Create.displayName = 'proto.file.api.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.api.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.Data.displayName = 'proto.file.api.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.api.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.Close.displayName = 'proto.file.api.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.ChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.file.api.ChannelRequest.oneofGroups_);
};
goog.inherits(proto.file.api.ChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.ChannelRequest.displayName = 'proto.file.api.ChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.Created = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.api.Created, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.Created.displayName = 'proto.file.api.Created';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.Closed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.file.api.Closed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.Closed.displayName = 'proto.file.api.Closed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.file.api.ReceiveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.file.api.ReceiveResponse.oneofGroups_);
};
goog.inherits(proto.file.api.ReceiveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.file.api.ReceiveResponse.displayName = 'proto.file.api.ReceiveResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Create.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken_asB64(),
    destination: msg.getDestination_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.Create}
 */
proto.file.api.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.Create;
  return proto.file.api.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.Create}
 */
proto.file.api.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDestination_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes token = 1;
 * @return {!(string|Uint8Array)}
 */
proto.file.api.Create.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes token = 1;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.file.api.Create.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.file.api.Create.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.file.api.Create} returns this
 */
proto.file.api.Create.prototype.setToken = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes destination = 2;
 * @return {!(string|Uint8Array)}
 */
proto.file.api.Create.prototype.getDestination = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes destination = 2;
 * This is a type-conversion wrapper around `getDestination()`
 * @return {string}
 */
proto.file.api.Create.prototype.getDestination_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestination()));
};


/**
 * optional bytes destination = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestination()`
 * @return {!Uint8Array}
 */
proto.file.api.Create.prototype.getDestination_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestination()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.file.api.Create} returns this
 */
proto.file.api.Create.prototype.setDestination = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.Data}
 */
proto.file.api.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.Data;
  return proto.file.api.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.Data}
 */
proto.file.api.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.file.api.Data.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.file.api.Data.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.file.api.Data.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.file.api.Data} returns this
 */
proto.file.api.Data.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Close.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.Close}
 */
proto.file.api.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.Close;
  return proto.file.api.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.Close}
 */
proto.file.api.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.file.api.ChannelRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.file.api.ChannelRequest.ReqCase = {
  REQ_NOT_SET: 0,
  CREATE: 1,
  DATA: 2,
  CLOSE: 3
};

/**
 * @return {proto.file.api.ChannelRequest.ReqCase}
 */
proto.file.api.ChannelRequest.prototype.getReqCase = function() {
  return /** @type {proto.file.api.ChannelRequest.ReqCase} */(jspb.Message.computeOneofCase(this, proto.file.api.ChannelRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.ChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.ChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.ChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.ChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    create: (f = msg.getCreate()) && proto.file.api.Create.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.file.api.Data.toObject(includeInstance, f),
    close: (f = msg.getClose()) && proto.file.api.Close.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.ChannelRequest}
 */
proto.file.api.ChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.ChannelRequest;
  return proto.file.api.ChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.ChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.ChannelRequest}
 */
proto.file.api.ChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file.api.Create;
      reader.readMessage(value,proto.file.api.Create.deserializeBinaryFromReader);
      msg.setCreate(value);
      break;
    case 2:
      var value = new proto.file.api.Data;
      reader.readMessage(value,proto.file.api.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.file.api.Close;
      reader.readMessage(value,proto.file.api.Close.deserializeBinaryFromReader);
      msg.setClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.ChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.ChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.ChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.ChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file.api.Create.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.file.api.Data.serializeBinaryToWriter
    );
  }
  f = message.getClose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file.api.Close.serializeBinaryToWriter
    );
  }
};


/**
 * optional Create create = 1;
 * @return {?proto.file.api.Create}
 */
proto.file.api.ChannelRequest.prototype.getCreate = function() {
  return /** @type{?proto.file.api.Create} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Create, 1));
};


/**
 * @param {?proto.file.api.Create|undefined} value
 * @return {!proto.file.api.ChannelRequest} returns this
*/
proto.file.api.ChannelRequest.prototype.setCreate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.file.api.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ChannelRequest} returns this
 */
proto.file.api.ChannelRequest.prototype.clearCreate = function() {
  return this.setCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ChannelRequest.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 2;
 * @return {?proto.file.api.Data}
 */
proto.file.api.ChannelRequest.prototype.getData = function() {
  return /** @type{?proto.file.api.Data} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Data, 2));
};


/**
 * @param {?proto.file.api.Data|undefined} value
 * @return {!proto.file.api.ChannelRequest} returns this
*/
proto.file.api.ChannelRequest.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.file.api.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ChannelRequest} returns this
 */
proto.file.api.ChannelRequest.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ChannelRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Close close = 3;
 * @return {?proto.file.api.Close}
 */
proto.file.api.ChannelRequest.prototype.getClose = function() {
  return /** @type{?proto.file.api.Close} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Close, 3));
};


/**
 * @param {?proto.file.api.Close|undefined} value
 * @return {!proto.file.api.ChannelRequest} returns this
*/
proto.file.api.ChannelRequest.prototype.setClose = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.file.api.ChannelRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ChannelRequest} returns this
 */
proto.file.api.ChannelRequest.prototype.clearClose = function() {
  return this.setClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ChannelRequest.prototype.hasClose = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.Created.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.Created.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.Created} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Created.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.Created}
 */
proto.file.api.Created.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.Created;
  return proto.file.api.Created.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.Created} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.Created}
 */
proto.file.api.Created.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.Created.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.Created.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.Created} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Created.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.Closed.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.Closed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.Closed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Closed.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.Closed}
 */
proto.file.api.Closed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.Closed;
  return proto.file.api.Closed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.Closed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.Closed}
 */
proto.file.api.Closed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.Closed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.Closed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.Closed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.Closed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.file.api.ReceiveResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.file.api.ReceiveResponse.RespCase = {
  RESP_NOT_SET: 0,
  CREATED: 1,
  DATA: 2,
  CLOSED: 3
};

/**
 * @return {proto.file.api.ReceiveResponse.RespCase}
 */
proto.file.api.ReceiveResponse.prototype.getRespCase = function() {
  return /** @type {proto.file.api.ReceiveResponse.RespCase} */(jspb.Message.computeOneofCase(this, proto.file.api.ReceiveResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.file.api.ReceiveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.file.api.ReceiveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.file.api.ReceiveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.ReceiveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: (f = msg.getCreated()) && proto.file.api.Created.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.file.api.Data.toObject(includeInstance, f),
    closed: (f = msg.getClosed()) && proto.file.api.Closed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.file.api.ReceiveResponse}
 */
proto.file.api.ReceiveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.file.api.ReceiveResponse;
  return proto.file.api.ReceiveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.file.api.ReceiveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.file.api.ReceiveResponse}
 */
proto.file.api.ReceiveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.file.api.Created;
      reader.readMessage(value,proto.file.api.Created.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 2:
      var value = new proto.file.api.Data;
      reader.readMessage(value,proto.file.api.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.file.api.Closed;
      reader.readMessage(value,proto.file.api.Closed.deserializeBinaryFromReader);
      msg.setClosed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.file.api.ReceiveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.file.api.ReceiveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.file.api.ReceiveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.file.api.ReceiveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.file.api.Created.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.file.api.Data.serializeBinaryToWriter
    );
  }
  f = message.getClosed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.file.api.Closed.serializeBinaryToWriter
    );
  }
};


/**
 * optional Created created = 1;
 * @return {?proto.file.api.Created}
 */
proto.file.api.ReceiveResponse.prototype.getCreated = function() {
  return /** @type{?proto.file.api.Created} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Created, 1));
};


/**
 * @param {?proto.file.api.Created|undefined} value
 * @return {!proto.file.api.ReceiveResponse} returns this
*/
proto.file.api.ReceiveResponse.prototype.setCreated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.file.api.ReceiveResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ReceiveResponse} returns this
 */
proto.file.api.ReceiveResponse.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ReceiveResponse.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 2;
 * @return {?proto.file.api.Data}
 */
proto.file.api.ReceiveResponse.prototype.getData = function() {
  return /** @type{?proto.file.api.Data} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Data, 2));
};


/**
 * @param {?proto.file.api.Data|undefined} value
 * @return {!proto.file.api.ReceiveResponse} returns this
*/
proto.file.api.ReceiveResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.file.api.ReceiveResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ReceiveResponse} returns this
 */
proto.file.api.ReceiveResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ReceiveResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Closed closed = 3;
 * @return {?proto.file.api.Closed}
 */
proto.file.api.ReceiveResponse.prototype.getClosed = function() {
  return /** @type{?proto.file.api.Closed} */ (
    jspb.Message.getWrapperField(this, proto.file.api.Closed, 3));
};


/**
 * @param {?proto.file.api.Closed|undefined} value
 * @return {!proto.file.api.ReceiveResponse} returns this
*/
proto.file.api.ReceiveResponse.prototype.setClosed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.file.api.ReceiveResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.file.api.ReceiveResponse} returns this
 */
proto.file.api.ReceiveResponse.prototype.clearClosed = function() {
  return this.setClosed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.file.api.ReceiveResponse.prototype.hasClosed = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.file.api);
