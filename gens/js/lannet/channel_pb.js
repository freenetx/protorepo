// source: lannet/channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lannet.api.CenterRequest', null, global);
goog.exportSymbol('proto.lannet.api.CenterRequest.ReqCase', null, global);
goog.exportSymbol('proto.lannet.api.CenterResponse', null, global);
goog.exportSymbol('proto.lannet.api.CenterResponse.RespCase', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetHelloClient', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetHelloServer', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetRequest', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetRequest.ReqCase', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetResponse', null, global);
goog.exportSymbol('proto.lannet.api.DirectNetResponse.RespCase', null, global);
goog.exportSymbol('proto.lannet.api.HelloClient', null, global);
goog.exportSymbol('proto.lannet.api.HelloServer', null, global);
goog.exportSymbol('proto.lannet.api.StringList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.HelloServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lannet.api.HelloServer.repeatedFields_, null);
};
goog.inherits(proto.lannet.api.HelloServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.HelloServer.displayName = 'proto.lannet.api.HelloServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.CenterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lannet.api.CenterRequest.oneofGroups_);
};
goog.inherits(proto.lannet.api.CenterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.CenterRequest.displayName = 'proto.lannet.api.CenterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lannet.api.StringList.repeatedFields_, null);
};
goog.inherits(proto.lannet.api.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.StringList.displayName = 'proto.lannet.api.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.HelloClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lannet.api.HelloClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.HelloClient.displayName = 'proto.lannet.api.HelloClient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.CenterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lannet.api.CenterResponse.oneofGroups_);
};
goog.inherits(proto.lannet.api.CenterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.CenterResponse.displayName = 'proto.lannet.api.CenterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.DirectNetHelloServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lannet.api.DirectNetHelloServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.DirectNetHelloServer.displayName = 'proto.lannet.api.DirectNetHelloServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.DirectNetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lannet.api.DirectNetRequest.oneofGroups_);
};
goog.inherits(proto.lannet.api.DirectNetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.DirectNetRequest.displayName = 'proto.lannet.api.DirectNetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.DirectNetHelloClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lannet.api.DirectNetHelloClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.DirectNetHelloClient.displayName = 'proto.lannet.api.DirectNetHelloClient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lannet.api.DirectNetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lannet.api.DirectNetResponse.oneofGroups_);
};
goog.inherits(proto.lannet.api.DirectNetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lannet.api.DirectNetResponse.displayName = 'proto.lannet.api.DirectNetResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lannet.api.HelloServer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.HelloServer.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.HelloServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.HelloServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.HelloServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    myIpsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    myEncodedAddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.HelloServer}
 */
proto.lannet.api.HelloServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.HelloServer;
  return proto.lannet.api.HelloServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.HelloServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.HelloServer}
 */
proto.lannet.api.HelloServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMyIps(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyEncodedAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.HelloServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.HelloServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.HelloServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.HelloServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMyIpsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMyEncodedAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.lannet.api.HelloServer.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lannet.api.HelloServer} returns this
 */
proto.lannet.api.HelloServer.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string my_ips = 2;
 * @return {!Array<string>}
 */
proto.lannet.api.HelloServer.prototype.getMyIpsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lannet.api.HelloServer} returns this
 */
proto.lannet.api.HelloServer.prototype.setMyIpsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lannet.api.HelloServer} returns this
 */
proto.lannet.api.HelloServer.prototype.addMyIps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lannet.api.HelloServer} returns this
 */
proto.lannet.api.HelloServer.prototype.clearMyIpsList = function() {
  return this.setMyIpsList([]);
};


/**
 * optional string my_encoded_address = 3;
 * @return {string}
 */
proto.lannet.api.HelloServer.prototype.getMyEncodedAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lannet.api.HelloServer} returns this
 */
proto.lannet.api.HelloServer.prototype.setMyEncodedAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lannet.api.CenterRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.lannet.api.CenterRequest.ReqCase = {
  REQ_NOT_SET: 0,
  HELLO: 1,
  DATA: 2
};

/**
 * @return {proto.lannet.api.CenterRequest.ReqCase}
 */
proto.lannet.api.CenterRequest.prototype.getReqCase = function() {
  return /** @type {proto.lannet.api.CenterRequest.ReqCase} */(jspb.Message.computeOneofCase(this, proto.lannet.api.CenterRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.CenterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.CenterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.CenterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.CenterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: (f = msg.getHello()) && proto.lannet.api.HelloServer.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.CenterRequest}
 */
proto.lannet.api.CenterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.CenterRequest;
  return proto.lannet.api.CenterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.CenterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.CenterRequest}
 */
proto.lannet.api.CenterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lannet.api.HelloServer;
      reader.readMessage(value,proto.lannet.api.HelloServer.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.CenterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.CenterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.CenterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.CenterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lannet.api.HelloServer.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional HelloServer hello = 1;
 * @return {?proto.lannet.api.HelloServer}
 */
proto.lannet.api.CenterRequest.prototype.getHello = function() {
  return /** @type{?proto.lannet.api.HelloServer} */ (
    jspb.Message.getWrapperField(this, proto.lannet.api.HelloServer, 1));
};


/**
 * @param {?proto.lannet.api.HelloServer|undefined} value
 * @return {!proto.lannet.api.CenterRequest} returns this
*/
proto.lannet.api.CenterRequest.prototype.setHello = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lannet.api.CenterRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lannet.api.CenterRequest} returns this
 */
proto.lannet.api.CenterRequest.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.CenterRequest.prototype.hasHello = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lannet.api.CenterRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lannet.api.CenterRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lannet.api.CenterRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lannet.api.CenterRequest} returns this
 */
proto.lannet.api.CenterRequest.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.CenterRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lannet.api.CenterRequest} returns this
 */
proto.lannet.api.CenterRequest.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.CenterRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.CenterRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lannet.api.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.StringList}
 */
proto.lannet.api.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.StringList;
  return proto.lannet.api.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.StringList}
 */
proto.lannet.api.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addStrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string strings = 1;
 * @return {!Array<string>}
 */
proto.lannet.api.StringList.prototype.getStringsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lannet.api.StringList} returns this
 */
proto.lannet.api.StringList.prototype.setStringsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lannet.api.StringList} returns this
 */
proto.lannet.api.StringList.prototype.addStrings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lannet.api.StringList} returns this
 */
proto.lannet.api.StringList.prototype.clearStringsList = function() {
  return this.setStringsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.HelloClient.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.HelloClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.HelloClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.HelloClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientsMap: (f = msg.getClientsMap()) ? f.toObject(includeInstance, undefined) : [],
    clientIpsMap: (f = msg.getClientIpsMap()) ? f.toObject(includeInstance, proto.lannet.api.StringList.toObject) : [],
    vpn: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.HelloClient}
 */
proto.lannet.api.HelloClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.HelloClient;
  return proto.lannet.api.HelloClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.HelloClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.HelloClient}
 */
proto.lannet.api.HelloClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getClientsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = msg.getClientIpsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.lannet.api.StringList.deserializeBinaryFromReader, "", new proto.lannet.api.StringList());
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVpn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.HelloClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.HelloClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.HelloClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.HelloClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getClientIpsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.lannet.api.StringList.serializeBinaryToWriter);
  }
  f = message.getVpn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * map<string, string> clients = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lannet.api.HelloClient.prototype.getClientsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.lannet.api.HelloClient} returns this
 */
proto.lannet.api.HelloClient.prototype.clearClientsMap = function() {
  this.getClientsMap().clear();
  return this;};


/**
 * map<string, StringList> client_ips = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.lannet.api.StringList>}
 */
proto.lannet.api.HelloClient.prototype.getClientIpsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.lannet.api.StringList>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.lannet.api.StringList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.lannet.api.HelloClient} returns this
 */
proto.lannet.api.HelloClient.prototype.clearClientIpsMap = function() {
  this.getClientIpsMap().clear();
  return this;};


/**
 * optional string vpn = 3;
 * @return {string}
 */
proto.lannet.api.HelloClient.prototype.getVpn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lannet.api.HelloClient} returns this
 */
proto.lannet.api.HelloClient.prototype.setVpn = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lannet.api.CenterResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.lannet.api.CenterResponse.RespCase = {
  RESP_NOT_SET: 0,
  HELLO: 1,
  DATA: 2
};

/**
 * @return {proto.lannet.api.CenterResponse.RespCase}
 */
proto.lannet.api.CenterResponse.prototype.getRespCase = function() {
  return /** @type {proto.lannet.api.CenterResponse.RespCase} */(jspb.Message.computeOneofCase(this, proto.lannet.api.CenterResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.CenterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.CenterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.CenterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.CenterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: (f = msg.getHello()) && proto.lannet.api.HelloClient.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.CenterResponse}
 */
proto.lannet.api.CenterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.CenterResponse;
  return proto.lannet.api.CenterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.CenterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.CenterResponse}
 */
proto.lannet.api.CenterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lannet.api.HelloClient;
      reader.readMessage(value,proto.lannet.api.HelloClient.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.CenterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.CenterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.CenterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.CenterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lannet.api.HelloClient.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional HelloClient hello = 1;
 * @return {?proto.lannet.api.HelloClient}
 */
proto.lannet.api.CenterResponse.prototype.getHello = function() {
  return /** @type{?proto.lannet.api.HelloClient} */ (
    jspb.Message.getWrapperField(this, proto.lannet.api.HelloClient, 1));
};


/**
 * @param {?proto.lannet.api.HelloClient|undefined} value
 * @return {!proto.lannet.api.CenterResponse} returns this
*/
proto.lannet.api.CenterResponse.prototype.setHello = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lannet.api.CenterResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lannet.api.CenterResponse} returns this
 */
proto.lannet.api.CenterResponse.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.CenterResponse.prototype.hasHello = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lannet.api.CenterResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lannet.api.CenterResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lannet.api.CenterResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lannet.api.CenterResponse} returns this
 */
proto.lannet.api.CenterResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.CenterResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lannet.api.CenterResponse} returns this
 */
proto.lannet.api.CenterResponse.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.CenterResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.CenterResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.DirectNetHelloServer.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.DirectNetHelloServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.DirectNetHelloServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetHelloServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.DirectNetHelloServer}
 */
proto.lannet.api.DirectNetHelloServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.DirectNetHelloServer;
  return proto.lannet.api.DirectNetHelloServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.DirectNetHelloServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.DirectNetHelloServer}
 */
proto.lannet.api.DirectNetHelloServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetHelloServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.DirectNetHelloServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.DirectNetHelloServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetHelloServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.lannet.api.DirectNetHelloServer.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lannet.api.DirectNetHelloServer} returns this
 */
proto.lannet.api.DirectNetHelloServer.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lannet.api.DirectNetRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.lannet.api.DirectNetRequest.ReqCase = {
  REQ_NOT_SET: 0,
  HELLO: 1,
  DATA: 2
};

/**
 * @return {proto.lannet.api.DirectNetRequest.ReqCase}
 */
proto.lannet.api.DirectNetRequest.prototype.getReqCase = function() {
  return /** @type {proto.lannet.api.DirectNetRequest.ReqCase} */(jspb.Message.computeOneofCase(this, proto.lannet.api.DirectNetRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.DirectNetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.DirectNetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.DirectNetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: (f = msg.getHello()) && proto.lannet.api.DirectNetHelloServer.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.DirectNetRequest}
 */
proto.lannet.api.DirectNetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.DirectNetRequest;
  return proto.lannet.api.DirectNetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.DirectNetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.DirectNetRequest}
 */
proto.lannet.api.DirectNetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lannet.api.DirectNetHelloServer;
      reader.readMessage(value,proto.lannet.api.DirectNetHelloServer.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.DirectNetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.DirectNetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lannet.api.DirectNetHelloServer.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional DirectNetHelloServer hello = 1;
 * @return {?proto.lannet.api.DirectNetHelloServer}
 */
proto.lannet.api.DirectNetRequest.prototype.getHello = function() {
  return /** @type{?proto.lannet.api.DirectNetHelloServer} */ (
    jspb.Message.getWrapperField(this, proto.lannet.api.DirectNetHelloServer, 1));
};


/**
 * @param {?proto.lannet.api.DirectNetHelloServer|undefined} value
 * @return {!proto.lannet.api.DirectNetRequest} returns this
*/
proto.lannet.api.DirectNetRequest.prototype.setHello = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lannet.api.DirectNetRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lannet.api.DirectNetRequest} returns this
 */
proto.lannet.api.DirectNetRequest.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.DirectNetRequest.prototype.hasHello = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lannet.api.DirectNetRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lannet.api.DirectNetRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lannet.api.DirectNetRequest} returns this
 */
proto.lannet.api.DirectNetRequest.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.DirectNetRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lannet.api.DirectNetRequest} returns this
 */
proto.lannet.api.DirectNetRequest.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.DirectNetRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.DirectNetRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.DirectNetHelloClient.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.DirectNetHelloClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.DirectNetHelloClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetHelloClient.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.DirectNetHelloClient}
 */
proto.lannet.api.DirectNetHelloClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.DirectNetHelloClient;
  return proto.lannet.api.DirectNetHelloClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.DirectNetHelloClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.DirectNetHelloClient}
 */
proto.lannet.api.DirectNetHelloClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetHelloClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.DirectNetHelloClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.DirectNetHelloClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetHelloClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lannet.api.DirectNetResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.lannet.api.DirectNetResponse.RespCase = {
  RESP_NOT_SET: 0,
  HELLO: 1,
  DATA: 2
};

/**
 * @return {proto.lannet.api.DirectNetResponse.RespCase}
 */
proto.lannet.api.DirectNetResponse.prototype.getRespCase = function() {
  return /** @type {proto.lannet.api.DirectNetResponse.RespCase} */(jspb.Message.computeOneofCase(this, proto.lannet.api.DirectNetResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lannet.api.DirectNetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lannet.api.DirectNetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lannet.api.DirectNetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: (f = msg.getHello()) && proto.lannet.api.DirectNetHelloClient.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lannet.api.DirectNetResponse}
 */
proto.lannet.api.DirectNetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lannet.api.DirectNetResponse;
  return proto.lannet.api.DirectNetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lannet.api.DirectNetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lannet.api.DirectNetResponse}
 */
proto.lannet.api.DirectNetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lannet.api.DirectNetHelloClient;
      reader.readMessage(value,proto.lannet.api.DirectNetHelloClient.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lannet.api.DirectNetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lannet.api.DirectNetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lannet.api.DirectNetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lannet.api.DirectNetHelloClient.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional DirectNetHelloClient hello = 1;
 * @return {?proto.lannet.api.DirectNetHelloClient}
 */
proto.lannet.api.DirectNetResponse.prototype.getHello = function() {
  return /** @type{?proto.lannet.api.DirectNetHelloClient} */ (
    jspb.Message.getWrapperField(this, proto.lannet.api.DirectNetHelloClient, 1));
};


/**
 * @param {?proto.lannet.api.DirectNetHelloClient|undefined} value
 * @return {!proto.lannet.api.DirectNetResponse} returns this
*/
proto.lannet.api.DirectNetResponse.prototype.setHello = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lannet.api.DirectNetResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lannet.api.DirectNetResponse} returns this
 */
proto.lannet.api.DirectNetResponse.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.DirectNetResponse.prototype.hasHello = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lannet.api.DirectNetResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lannet.api.DirectNetResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lannet.api.DirectNetResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lannet.api.DirectNetResponse} returns this
 */
proto.lannet.api.DirectNetResponse.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.DirectNetResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lannet.api.DirectNetResponse} returns this
 */
proto.lannet.api.DirectNetResponse.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 2, proto.lannet.api.DirectNetResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lannet.api.DirectNetResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.lannet.api);
